// Documentation Section
// CECS346Lab6.c
// Course number: CECS 346
// Assignment: Lab 6
// Project Group #10
// Team Members: Jose Ambriz, Bronson Garel, Jonathan Kim, Dylan Ong, Kyle Wyckoff
// Date: 10/18/2024
// System Requirements: 
// 	?

// Hardware design information:
//	?

#include "tm4c123gh6pm.h"
#include <stdint.h> // C99 data types

// 1. Pre-processor Directives Section
// Constant declarations to access port registers using 
// symbolic names instead of addresses

// TODO: define bit addresses for the three LEDs connected to PORTF  DONE
#define LED        (*((volatile uint32_t *)0x40025038)) //adds 0x0038 to base for bits PF1-3
#define SW2        (*((volatile uint32_t *)0x40025004)) //adds 0x0004 to base for first bit  
	
// TODO: Define the three LED bit positions  DONE
#define RED  			0x02  //PF1 bit position
#define BLUE 			0x04  //PF2 bit position
#define GREEN			0x08  //PF3 bit position
#define LED_MASK  0x14  //Mask for PF1-3
#define SW2_MASK  0x01  //PF0 bit position

// TODO: define constants used in this project. DONE
#define HALF_S 			 8000000U    // Assume the system clock is 16MHz.
					     // define number of clock cycles to generate 0.5s time interval.
                                             // A U follows a constant indicate this is an unsigned number
					     //Calculation: 16MHz * 0.5s = 8,000,000 ticks
#define NVIC_EN0_PORTF		  0xE000100  // bit position for PORTF interrupt in NVIC_EN0_R register.
															

// Function Prototypes (external functions from startup.s)
extern void DisableInterrupts(void); // Disable interrupts
extern void EnableInterrupts(void);  // Enable interrupts
extern void WaitForInterrupt(void);  // Go to low power mode while waiting for the next interrupt

// Function Prototypes
// Initialize rising edge triggered interrupt for PF0 (SW2) and three LEDs on Port F
void Switch_LED_Init(void);  

// Initialize SysTick timer with interrupt enabled.
// Parameter "period" specifies number of counts for the time 
// period generated by systick timer.
void SysTick_Init(uint32_t period);      

// global variable visible in Watch and Memory window of debugger:
// used for the purpose of practicing debug: use watch window and memory window 
// to keep track of varaible values and memory contents.
// This variable helps keeping track of number of button presses: 
// it increments once per button release.
volatile uint32_t RisingEdges = 0;

// keep track of the current active LED
volatile uint8_t curr_led = RED;

int main(void){
	DisableInterrupts();
  Switch_LED_Init();
	SysTick_Init(HALF_S);
	EnableInterrupts();
	
	// initialize current active LED to be red
	LED = RED;
	curr_led = RED;
	
  while(1){
		WaitForInterrupt();
  }
}


// TODO: Initialize rising edge triggered interrupt for PF0 (SW2) and three LEDs on Port F  DONE
void Switch_LED_Init(void) {
  //onboard LEDS PF1-3         3 = green, 2 = blue, 1 = red
  SYSCTL_RCGC2_R      |= 0x00000020;    //activates port F clock
  while ((SYSCTL_RCGCGPIO_R & 0x00000020) != 0x00000020) {} //wait for clock to be ready

  RisingEdges = 0;		        //initilize counter 
  GPIO_PORTF_LOCK_R    =  0x4C4F434B;	//Unlock PF0 (SW2)
  GPIO_PORTF_CR_R     |=  0x0F;         //allow changes on PF0-3: 
  GPIO_PORTF_AMSEL_R   = ~0x0F;         //disable analog function on PF0-3	
  GPIO_PORTF_PCTL_R   &= ~0x0000FFFF;   //GPIO clear bit PCTL
  GPIO_PORTF_DIR_R    |=  0x0E;         //make PF1-3 out (built-in LEDs)
  GPIO_PORTF_DIR_R    &=  0x01;         //make PF0 in (SW2)	
  GPIO_PORTF_AFSEL_R  &= ~0x0F;         //disable alt funct on PF0-3
  GPIO_PORTF_DEN_R    |=  0x0F;         //enable digital I/O on PF0-3  
  GPIO_PORTF_IS_R     &= ~0x01;		//PF0 is edge sensitive
  GPIO_PORTF_IBE_R    &= ~0x01;		//PF0 is not both edges
  GPIO_PORTF_IEV_R    |=  0x01;  	//PF0 rising edge event
  GPIO_PORTF_ICR_R    |=  0x01;         //clear flag on PF0
  GPIO_PORTF_IM_R     |=  0x01;         //arm interrupt on PF0
  NVIC_PRI7_R = (NVIC_PRI7_R&0xFF1FFFFF) | 0x00800000;  //priority gate 4,																					//clear bits 23-21 in NVIC_PRI7_R
		                                        //priority 4 = set top 3 bits of 23-16 to 4 hex:100																											//00800000 = 100 hex in bits 23-16
  NVIC_EN0_R = 0x40000000;			        //enable interrupt 30 in NVIC		

  
}

// TODO: Initialize SysTick timer with interrupt enabled.
// Parameter "period" specifies number of counts for the time 
void SysTick_Init(uint32_t period) {
	NVIC_ST_CTRL_R = 0;
	NVIC_ST_RELOAD_R = HALF_S - 1;
	NVIC_ST_CURRENT_R = 0;
	NVIC_SYS_PRI3_R = (NVIC_SYS_PRI3_R&0x00FFFFFF) | 0x40000000;
	NVIC_ST_CTRL_R = 0x07;
	EnableInterrupts();
}

// TODO: ISR that Handles GPIO Port F interrupts.     DONE
// When Port F interrupt triggers, do what's necessary then increment global variable RisingEdges
void GPIOPortF_Handler(void) {
	for (uint32_t i=0;i<160000;i++) {} // simple solution to take care of button debounce: 20ms to 30ms delay
	if (GPIO_PORTF_RIS_R & SW2_MASK) {	   //RIS = 1 when an interrupt condition has occurred 	
		GPIO_PORTF_ICR_R |= SW2_MASK;      // acknowledge flag0: 00000001 for switch 1
		RisingEdges = RisingEdges + 1;
	}
}
// TODO: ISR that Handles SysTick generated interrupts. 
// When timer interrupt triggers, do what's necessary then toggle the current LED
void SysTick_Handler(void) {
	// Flash Currently Selected LED
	uint8_t curr = curr_led;
	curr_led ^= curr;
	
}
